# -*- coding: utf-8 -*-
"""TicTac

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1wpK46lhfTTktkmbhOlSXxRSPw95AwnZr

Wap in python for “TIC TAC TOE “.
"""

def print_board(board):
    for row in board:
        print(" | ".join(row))
        print("-" * 5)

def check_winner(board):
    # Check rows
    for row in board:
        if row.count(row[0]) == len(row) and row[0] != " ":
            return True

    # Check columns
    for col in range(len(board[0])):
        if board[0][col] == board[1][col] == board[2][col] and board[0][col] != " ":
            return True

    # Check diagonals
    if board[0][0] == board[1][1] == board[2][2] and board[0][0] != " ":
        return True
    if board[0][2] == board[1][1] == board[2][0] and board[0][2] != " ":
        return True

    return False

def tic_tac_toe():
    board = [[" " for _ in range(3)] for _ in range(3)]
    players = ["X", "O"]
    current_player = 0

    print("Welcome to Tic Tac Toe!")

    while True:
        print_board(board)
        row = int(input("Player {} enter row (0, 1, 2): ".format(players[current_player])))
        col = int(input("Player {} enter column (0, 1, 2): ".format(players[current_player])))

        if board[row][col] != " ":
            print("That cell is already taken. Try again.")
            continue

        board[row][col] = players[current_player]

        if check_winner(board):
            print_board(board)
            print("Player {} wins!".format(players[current_player]))
            break

        if all([cell != " " for row in board for cell in row]):
            print_board(board)
            print("It's a tie!")
            break

        current_player = (current_player + 1) % 2

if __name__ == "__main__":
    tic_tac_toe()

"""Water Jug Problem"""

from collections import defaultdict
print("Water Jug Problem")
print("1.FILL the 1st Jug\n2.Fill the 2nd Jug\n3.Empty the 1st Jug\n4.Empty the 2nd Jug\n5.Fill the water from the second jug into the first jug until the first jug is full or the second jug has no water left\n6.Fill the water from the first jug into the second jug until the second jug is full or the first jug has no water left")
x= int(input('Enter the amount of water in 1st Jug: '))
y= int(input("Enter the amount of water in 2nd Jug: "))
c= int(input("Enter the amount of water we aim to add or delete from the jug: "))

v= defaultdict(lambda:False)
def waterjugsolver(a,b):
  if (a==c and b==0)or(b==c and a==0):
    print(a,b)
    return True
  if v[(a,b)]==False:
    print(a,b)
    v[(a,b)]=True
    return(waterjugsolver(0,b)or
           waterjugsolver(a,0)or
           waterjugsolver(x,b)or
           waterjugsolver(a,y)or
           waterjugsolver(a+min(b,(x-a)),b-min(b,(x-a)))or
           waterjugsolver(a-min(a,(y-b)),b+min(a,(y-b))))
  else:
         return False
print("Steps:")
a=int(input("amount of liquid already filled in jug 1st:"))
b=int(input("amount of liquid already filled in jug 2nd:"))
waterjugsolver(a,b)

"""Conditions to get solution of water jug problem:
1. Target not=0,-1

target should be multiple of

1.  target < big jar
2.
target should be multiple of (GCD (BIG JAR, SMALL JAR(4,6,3)946 false)(654 false)(12,6,9)(4,7,3) not work taget can't be more than container


"""